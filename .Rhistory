library(wordcloud2)
data = data.frame(name=c("New","Old"),
freq=c(100,30))
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
debug(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
debug(wordcloud2)
wordcloud2(data)
undebug(wordcloud2)
debug(htmlwidgets::createWidget)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
install.packages("jsonlite")
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
wordcloud2(data)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
wordcloud2(data)
library(REmap)
remap(demoC)
library(wordcloud2)
wordcloud2(data)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
data
library(wordcloud2)
wordcloud2(data)
wordcloud2(data)
library(wordcloud2)
library(wordcloud2,"1000px","1000px")
data = data.frame(name=c("New","Old"),
freq=c(10,3))
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
library(wordcloud2)
wordcloud2(data)
wordcloud2(data)
library(wordcloud2)
library(wordcloud2)
wordcloud2(data)
demoC
data1 = data.frame(demoC$origin,sample(1:10))
data1
names(data1) = c('name',"freq")
wordcldou2(data1)
wordcloud2(data1)
data1 = data.frame(demoC$destination,sample(1:10))
names(data1) = c('name',"freq")
wordcloud2(data1)
city
data1 = data.frame(city$city,sample(1:10))
data1 = data.frame(city$city,sample(20:70,size = 122,replace = F))
data1 = data.frame(city$city,sample(20:70,size = 122,replace = T))
names(data1) = c('name',"freq")
wordcloud2(data1)
data1 = data.frame(city$city,sample(1:20,size = 122,replace = T))
names(data1) = c('name',"freq")
wordcloud2(data1)
library(wordcloud)
wordcloud2(data1)
library(wordcloud2)
library(REmap)
data = data.frame(iconv(chinaIphone$V1,from="GBK",to = "UTF-8"),chinaIphone$V2)
wordcloud2(data,fontWeight = "bold")
system.time({
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
})
system.time({
wordcloud2(data.frame(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62)))
})
if(require(tm)){
##### 			from character 		#####
wordcloud(
"Many years ago the great British explorer George Mallory, who
was to die on Mount Everest, was asked why did he want to climb
it. He said, \"Because it is there.\"
Well, space is there, and we're going to climb it, and the
moon and the planets are there, and new hopes for knowledge
and peace are there. And, therefore, as we set sail we ask
God's blessing on the most hazardous and dangerous and greatest
adventure on which man has ever embarked.",
,random.order=FALSE)
## Not run:
data(crude)
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, function(x)removeWords(x,stopwords()))
##### 			from corpus 		#####
##### 		from frequency counts 	#####
tdm <- TermDocumentMatrix(crude)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
}
wordcloud2(d,weightFactor = 5)
library(REmap)
data = data.frame(iconv(chinaIphone$V1,from="GBK",to = "UTF-8"),chinaIphone$V2)
wordcloud2(data,fontWeight = "bold")
system.time({
wordcloud(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62))
})
system.time({
wordcloud2(data.frame(c(letters, LETTERS, 0:9), seq(1, 1000, len = 62)))
})
if(require(tm)){
##### 			from character 		#####
wordcloud(
"Many years ago the great British explorer George Mallory, who
was to die on Mount Everest, was asked why did he want to climb
it. He said, \"Because it is there.\"
Well, space is there, and we're going to climb it, and the
moon and the planets are there, and new hopes for knowledge
and peace are there. And, therefore, as we set sail we ask
God's blessing on the most hazardous and dangerous and greatest
adventure on which man has ever embarked.",
,random.order=FALSE)
## Not run:
data(crude)
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, function(x)removeWords(x,stopwords()))
##### 			from corpus 		#####
##### 		from frequency counts 	#####
tdm <- TermDocumentMatrix(crude)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
}
wordcloud2(d,weightFactor = 5)
d
if(require(tm)){
##### 			from character 		####
## Not run:
data(crude)
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, function(x)removeWords(x,stopwords()))
##### 			from corpus 		#####
##### 		from frequency counts 	#####
tdm <- TermDocumentMatrix(crude)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
}
wordcloud2(d,weightFactor = 5)
??base64
base64enc::base64("C:/Users/Administrator/Desktop/Audi.png")
base64enc::base64encode("C:/Users/Administrator/Desktop/Audi.png")
a = readLines("http://cos.name/feed/",encoding="UTF-8")
a = readLines("http://cos.name/feed/",n=10000,encoding="UTF-8")
a = readLines("http://cos.name/feed/")
a = readLines("data/feed.xml",encoding = "UTF-8")
cc = worker(symbol = T)
out = cc<=a
library(jiebaR)
cc = worker(symbol = T)
out = cc<=a
out
tab = table(out)
tab[1:100]
tab = sort(table(out),decreasing = T)
tab[1:100]
stop = readLines(STOPPATH,encoding="UTF-8")
stopWord = readLines(STOPPATH,encoding="UTF-8")
newTab = tab[!names(tab) %in% stopWord]
newTab[1:100]
data = data.frame(names(newTab)[1:500],newTab[1:500])
wordcloud2::wordcloud2(data)
gregexpr("[a-zA-Z]",names(Tab)[1:10])
gregexpr("[a-zA-Z]",names(tab)[1:10])
regexpr("[a-zA-Z]",names(tab)[1:10])
regexpr("[a-zA-Z]*",names(tab)[1:10])
names(tab)[1:10]
demoFreqC = readLines("data/COS.txt",encoding="UTF-8")
demoFreqC = demoFreqC[,c(2,1)]
demoFreqC = read.csv("data/COS.txt",header = F,sep = "\t", encoding="UTF-8")
demoFreqC = demoFreqC[,c(2,1)]
wordcloud2(demoFreqC)
library(wordcloud2)
wordcloud2(demoFreqC)
wordcloud2(demoFreqC,weightFactor = 2)
library(wordcloud2)
demoFreqC = read.csv("example/COS.txt",header = F,sep = "\t", encoding="UTF-8")
demoFreqC = read.csv("examples/COS.txt",header = F,sep = "\t", encoding="UTF-8")
sum(sapply(as.character(demoFreqC$V2),function(x) x %in% stopW))
stopW = readLines(STOPPATH,encoding="UTF-8")
library(jiebaR)
stopW = readLines(STOPPATH,encoding="UTF-8")
sum(sapply(as.character(demoFreqC$V2),function(x) x %in% stopW))
demoFreqC = demoFreqC [!as.character(demoFreqC$V2)  %in% stopW,]
demoFreqC = demoFreqC[,c(2,1)]
wordcloud2(demoFreqC)
library(wordcloud2)
library(jiebaR)
stopW = readLines(STOPPATH,encoding="UTF-8")
demoFreqC = read.csv("examples/COS.txt",header = F,sep = "\t", encoding="UTF-8")
demoFreqC = demoFreqC [!as.character(demoFreqC$V2)  %in% stopW,]
demoFreqC = demoFreqC[,c(2,1)]
wordcloud2(demoFreqC,weightFactor = 2)
wordcloud2(demoFreqC)
wordcloud2(demoFreqC,size=2)
wordcloud2(demoFreqC,size=1.5)
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑")
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑",shape='diamond')
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑",shape='cardioid')
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑",shape='triangle')
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑",shape='diamond')
wordcloud2(demoFreqC,size=1,fontFamily = "微软雅黑",shape='diamond')
wordcloud2(demoFreqC,size=1,fontFamily = "微软雅黑",shape='cardioid')
wordcloud2(demoFreqC,size=1,fontFamily = "微软雅黑",shape='triangle-forward')
save(demoFreqC,file="examples/demoFreqC.rda")
library(wordcloud2)
wordcloud2(demoFreqC)
wordcloud2(demoFreqC,size = 2)
wordcloud2(demoFreqC,size=1.5,fontFamily = "微软雅黑")
wordcloud2(demoFreqC,size=1,fontFamily = "微软雅黑",shape='diamond')
wordcloud2(demoFreqC,size=1,fontFamily = "微软雅黑",shape='triangle-forward')
wordcloud2(demoFreqC,color = "light-color")
wordcloud2(demoFreqC,color = "random-light")
wordcloud2(demoFreqC,color = "random-light",backgroundColor = "black")
wordcloud2(demoFreqC,size=3,fontFamily = "微软雅黑"color = "random-light",backgroundColor = "black")
wordcloud2(demoFreqC,size=3,fontFamily = "微软雅黑",color = "random-light",backgroundColor = "black")
wordcloud2(demoFreqC,size=2,fontFamily = "微软雅黑",color = "random-light",backgroundColor = "black")
wordcloud2(demoFreq,weightFactor = 2.5)
wordcloud2(demoFreq,size = 2.5)
demoFreq
library(wordcloud2)
n <- 1
# Define the UI
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$plot <- renderWordcloud2({
wordcloud2(d, size=input$size)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
library(shiny)
n <- 1
# Define the UI
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$plot <- renderWordcloud2({
wordcloud2(d, size=input$size)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
n <- 1
# Define the UI
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$plot <- renderWordcloud2({
wordcloud2(demoFreqC, size=input$size)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
n <- 1
# Define the UI
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$wordcloud2 <- renderWordcloud2({
wordcloud2(demoFreqC, size=input$size)
})
}
# Return a Shiny app object
shinyApp(ui = ui, server = server)
Sys.setlocale("LC_CTYPE","chs")
shinyApp(ui = ui, server = server)
wordcloud2(demoFreqC, size=input$size)
wordcloud2(demoFreqC, size=1)
Sys.setlocale("LC_CTYPE","eng")
wordcloud2(demoFreqC, size=input$size)
wordcloud2(demoFreqC, size=1)
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$wordcloud2 <- renderWordcloud2({
wordcloud2(demoFreqC, size=input$size)
})
}
# Return a Shiny app object
Sys.setlocale("LC_CTYPE","chs")
shinyApp(ui = ui, server = server)
library(wordcloud2)
demoFreq,
demoFreq
n <- 1
# Define the UI
ui <- bootstrapPage(
numericInput('size', 'Size of wordcloud', n),
wordcloud2Output('wordcloud2')
)
# Define the server code
server <- function(input, output) {
output$wordcloud2 <- renderWordcloud2({
wordcloud2(demoFreq, size=input$size)
})
}
# Return a Shiny app object
# Sys.setlocale("LC_CTYPE","chs") #if you use Chinese
shinyApp(ui = ui, server = server)
dim(demoFreqC)
head(demoFreqC)
wordcloud2(demoFreqC,size=2,fontFamily = "微软雅黑")
head(wordcloud2::demoFreqC)
demofreqC$V2
demoFreqC$V2
